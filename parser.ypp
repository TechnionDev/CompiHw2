%{
// C user declarations
#include <iostream>
#include "output.hpp"
#include "tokens.hpp"

using std::cout;
using std::endl;
using std::cin;

%}
/* Declarations */
%nonassoc VOID
%nonassoc INT
%nonassoc BYTE
%nonassoc B
%nonassoc BOOL
%nonassoc AUTO
%nonassoc AND
%nonassoc OR
%nonassoc NOT
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc IF
%nonassoc ELSE
%nonassoc WHILE
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc SC
%nonassoc COMMA
%nonassoc LPAREN
%nonassoc RPAREN
%nonassoc LBRACE
%nonassoc RBRACE
%nonassoc ASSIGN
%nonassoc RELOP
%nonassoc BINOP
%nonassoc ID
%nonassoc NUM
%nonassoc STRING


%%
/* Rules */
Program:        Funcs                               {};
Funcs:                                              {}
                | FuncDecl Funcs                    {};
FuncDecl:       RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE {};
RetType:        Type                                {}
                | VOID                              {};
Formals:        FormalsList                         {};
FormalsList:                                        {}
                | FormalDecl COMMA FormalsList      {};
FormalDecl:     Type ID                             {};
Statements:     Statement                           {}
                | Statements Statement              {};
Statement:      LBRACE Statements RBRACE            {}
                | Type ID SC                        {}
                | Type ID ASSIGN Exp SC             {}
                | AUTO ID ASSIGN Exp SC             {}
                | ID ASSIGN Exp SC                  {}
                | Call SC                           {}
                | RETURN SC                         {}
                | RETURN Exp SC                     {}
                | IF LPAREN Exp RPAREN Statement    {}
                | IF LPAREN Exp RPAREN Statement ELSE Statement {}
                | WHILE LPAREN Exp RPAREN Statement {}
                | BREAK SC                          {}
                | CONTINUE SC                       {};
Call:           ID LPAREN ExpList RPAREN            {}
                | ID LPAREN RPAREN                  {};
ExpList:        Exp                                 {}
                | ExpList COMMA ExpList             {};
Type:           INT                                 {}
                | BYTE                              {}
                | BOOL                              {};
Exp:            LPAREN Exp RPAREN                   {}
                |Exp BINOP Exp                      {}
                |ID                                 {}
                |Call                               {}
                |NUM                                {}
                |NUM B                              {}
                |STRING                             {}
                |TRUE                               {}
                |FALSE                              {}
                |NOT Exp                            {}
                |Exp AND Exp                        {}
                |Exp OR Exp                         {}
                |Exp RELOP Exp                      {}
                |LPAREN Type RPAREN Exp             {};
%%

/* User routines */
int main() {
    yyparse();
    return 0;
}

int yyerror(char * s) {
    cout << "Parse error: " << s << "! Bye now" << endl;
    exit(1);
}
